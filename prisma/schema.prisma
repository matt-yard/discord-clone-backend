// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  authorId String @db.ObjectId
  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  content String
  createdAt DateTime @default(now())
  channelId String @db.ObjectId
  channel Channel @relation(fields: [channelId],references: [id])
}


model User {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  username String @unique
  password String
  email String @unique
  serverIds String[] @db.ObjectId
  servers Member[]
  messages Message[]
  profileImage String @default("none")
}

model Server {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  channels Channel[]
  memberIds String[] @db.ObjectId
  members Member[]
  serverImage String @default("none")
}

model Member {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  serverId String @db.ObjectId
  joinedDate DateTime @default(now())
  roleIds String[] @db.ObjectId
  roles Role[] @relation(fields: [roleIds], references: [id])

  @@unique([userId, serverId])
}

model Role {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  memberIds String[] @db.ObjectId
  members Member[] @relation(fields: [memberIds], references: [id])
}

model Channel {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  name String
  type String
  serverId String @db.ObjectId
  server Server @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages Message[]
}


